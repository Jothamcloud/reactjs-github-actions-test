name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted

    steps:
      - name: Write the private key to a temporary file
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: SSH into the server and deploy
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@174.129.103.108 << 'EOF'
            cd /var/www/myapp
            sudo rm -rf build

            # Install JFrog CLI if not installed
            if ! command -v jfrog &> /dev/null; then
              curl -fL https://getcli.jfrog.io | sh
            fi

            # Download the latest build artifact from JFrog using curl
            echo "Downloading the latest build artifact..."
            curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }}" \
                 -O "${{ secrets.JFROG_URL }}/local/builds/react-app/build-${{ github.event.workflow_run.id }}/build.zip" || {
                 echo "Download failed, exiting.";
                 exit 1;
            }

            # Unzip the artifact into the /var/www/myapp directory
            unzip build.zip -d build || {
              echo "Unzip failed, exiting.";
              exit 1;
            }

            # Ensure the new files are in the right directory structure
            sudo mv build /var/www/myapp/

            # Restart the nginx server
            sudo systemctl restart nginx || {
              echo "Failed to restart nginx, check the configuration.";
              exit 1;
            }
          EOF

      - name: Clean up private key
        run: rm private_key.pem



# name: CD

# on:
#   workflow_run:
#     workflows: ["CI"]
#     types:
#       - completed

# jobs:
#   deploy:
#     if: ${{ github.event.workflow_run.conclusion == 'success' }}
#     runs-on: self-hosted

#     steps:
#       - name: Write the private key to a temporary file
#         run: |
#           echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
#           chmod 600 private_key.pem

#       - name: SSH into the server and deploy
#         run: |
#           ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@174.129.103.108 << 'EOF'
#             cd /var/www/myapp
#             sudo rm -rf build

#             # Install JFrog CLI if not installed
#             if ! command -v jfrog &> /dev/null; then
#               curl -fL https://getcli.jfrog.io | sh
#             fi

#             # Check if the URL and download command are correct
#             echo "Downloading the latest build artifact..."

#             # Download the latest build artifact from JFrog using curl
#             curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }}" \
#                  -O "${{ secrets.JFROG_URL }}/local/builds/react-app/build-${{ github.event.workflow_run.id }}/build.zip" || {
#                  echo "Download failed, exiting.";
#                  exit 1;
#             }

#             # Unzip the artifact and move it to the proper location
#             unzip build.zip || {
#               echo "Unzip failed, exiting.";
#               exit 1;
#             }
#             mv build/* .

#             # Restart the nginx server
#             sudo systemctl restart nginx || {
#               echo "Failed to restart nginx, check the configuration.";
#               exit 1;
#             }
#           EOF

#       - name: Clean up private key
#         run: rm private_key.pem
